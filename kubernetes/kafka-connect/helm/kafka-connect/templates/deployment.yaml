apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.namespace |  default "default" }}
  name: kafka-connect
  labels:
    app: kafka-connect
spec:
  ports:
  - name: http
    port: 8083
    targetPort: 8083
  selector:
    app: kafka-connect
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace |  default "default" }}
  name: kafka-connect
  labels:
    app: kafka-connect
spec:
  selector:
    matchLabels:
      app: kafka-connect
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: kafka-connect
    spec:
      imagePullSecrets:
      - name: ocir-secret
      containers:
      {{- with .Values.kafka_connect }}
      - image: {{ .image }}
        name: kafka-connect
        env:
        - name: "KAFKA_CONNECT_USERNAME"
          valueFrom:
            secretKeyRef:
              name: kafka-connect-secret
              key: username
        - name: "KAFKA_CONNECT_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: kafka-connect-secret
              key: password
        - name: "CONNECT_BOOTSTRAP_SERVERS"
          value: {{ .bootstrap_servers }}
        - name: "CONNECT_REST_PORT"
          value: "8083"
        - name: "CONNECT_GROUP_ID"
          value: "kafka-connect"
        - name: "CONNECT_CONFIG_STORAGE_TOPIC"
          value: {{ .topics.config_storage }}
        - name: "CONNECT_OFFSET_STORAGE_TOPIC"
          value: {{ .topics.offset_storage }}
        - name: "CONNECT_STATUS_STORAGE_TOPIC"
          value: {{ .topics.status_storage }}
        - name: "CONNECT_KEY_CONVERTER"
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: "CONNECT_VALUE_CONVERTER"
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: "CONNECT_REST_ADVERTISED_HOST_NAME"
          value: {{ .rest_advertised_host_name | default "kafka-connect" }}
        - name: "CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN"
          value: "[%d] %p %X{connector.context}%m (%c:%L)%n"
        - name: "CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR"
          value: "1"
        - name: "CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR"
          value: "1"
        - name: "CONNECT_STATUS_STORAGE_REPLICATION_FACTOR"
          value: "1"
        - name: "CONNECT_MESSAGE_SEND_MAX_RETRIES"
          value: "5"
        - name: "CONNECT_MAX_REQUEST_SIZE"
          value: "1024"
        - name: "CONNECT_MAX_PARTITION_FETCH_BYTES"
          value: "1048576"
        - name: "CONNECT_SECURITY_PROTOCOL"
          value: "SASL_SSL"
        - name: "CONNECT_SASL_MECHANISM"
          value: "PLAIN"
        - name: "CONNECT_SASL_JAAS_CONFIG"
          value: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(KAFKA_CONNECT_USERNAME)/{{ .oci_streaming.pool }}\" password=\"$(KAFKA_CONNECT_PASSWORD)\";"
        - name: "CONNECT_PRODUCER_SECURITY_PROTOCOL"
          value: "SASL_SSL"
        - name: "CONNECT_PRODUCER_SASL_MECHANISM"
          value: "PLAIN"
        - name: "CONNECT_PRODUCER_SASL_JAAS_CONFIG"
          value: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(KAFKA_CONNECT_USERNAME)/{{ .oci_streaming.pool }}\" password=\"$(KAFKA_CONNECT_PASSWORD)\";"
        - name: "CONNECT_CONSUMER_SECURITY_PROTOCOL"
          value: "SASL_SSL"
        - name: "CONNECT_CONSUMER_SASL_MECHANISM"
          value: "PLAIN"
        - name: "CONNECT_CONSUMER_SASL_JAAS_CONFIG"
          value: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$(KAFKA_CONNECT_USERNAME)/{{ .oci_streaming.pool }}\" password=\"$(KAFKA_CONNECT_PASSWORD)\";"
        - name: "CONNECT_PLUGIN_PATH"
          value: "/usr/share/java,/usr/share/confluent-hub-components"
        ports:
        - containerPort: 8083
          name: kafka-connect
        volumeMounts:
        - name: wallet-volume
          mountPath: /mnt/wallet
        - name: kafka-connect-secret
          mountPath: /mnt/kafka-connect-secrets-store
        - name: ocir-secret
          mountPath: /mnt/ocir-secrets-store
      {{- end }}
      initContainers:
      {{- $init_image := .Values.adb_wallet_download.image -}}
      {{- range .Values.adb_wallet_download.databases }}
      - image: "{{ $init_image }}"
        imagePullPolicy: Always
        name: download-wallet-{{ .name }}
        volumeMounts:
        - name: wallet-volume
          mountPath: /mnt/wallet
        - name: ocir-secret
          mountPath: /mnt/ocir-secrets-store
        env:
        - name: ADB_NAME
          value: {{ .name }}
        - name: ADB_OCID
          value: {{ .id }}
        command: ["/bin/bash"]
        args:
        - -c
        - >-
            python /oci/download-adb-wallet.py
            --id $(ADB_OCID)
            --dir /mnt/wallet/$(ADB_NAME)
      {{- end }}
      volumes:
      - name: wallet-volume
        emptyDir: {}
      - name: kafka-connect-secret
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: kafka-connect-secret-provider-class
      - name: ocir-secret
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: ocir-secret-provider-class